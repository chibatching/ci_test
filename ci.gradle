/*
 * for ci
 */
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

check.dependsOn 'checkstyle', 'findbugs', 'pmd'

task checkstyle(type: Checkstyle) {
    def conf = File.createTempFile("checkstyle", "")
    new URL('https://raw.githubusercontent.com/chibatching/gradle-android-ci-check/master/config/checkstyle/checkstyle.xml')
            .withInputStream{ i -> conf.withOutputStream{ it << i }}
    configFile conf
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
    ignoreFailures = true
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"

    def conf = File.createTempFile("findbugs", "")
    new URL('https://raw.githubusercontent.com/chibatching/gradle-android-ci-check/master/config/findbugs/findbugs-filter.xml')
            .withInputStream{ i -> conf.withOutputStream{ it << i }}
    excludeFilter = conf
    classes = files("$project.buildDir/intermediates/classes/")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
            xml.withMessages true
        }
    }

    classpath = files()
}

task pmd(type: Pmd) {
    def conf = File.createTempFile("pmd", "")
    new URL('https://raw.githubusercontent.com/chibatching/gradle-android-ci-check/master/config/pmd/pmd-ruleset.xml')
            .withInputStream{ i -> conf.withOutputStream{ it << i }}
    ruleSetFiles = files(conf)
    ignoreFailures = true
    ruleSets = [ "java-basic", "java-strings", "java-braces" ]

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
    }
}
